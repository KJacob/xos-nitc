alias physicalSP S0;

physicalSP = [PTBR + 2 * (SP / 512)] * 512 + SP % 512; 

if ([physicalSP - 1] == 8) then //System call number
    alias counter S1;
    alias childpt S2;
    alias n_procpages S3;
    alias newptbr S4;
    alias counter2 S5;
    alias counter3 S6;
    
    counter = 0;
    
    while (counter < 32) do
        if ([READY_LIST + 32 * counter + 1] == 0) then
            break;
        endif;
            
        counter = counter + 1;
    endwhile;
        
    if (counter == 32) then //No space for further entries.
        [physicalSP - 2] = -1;
        ireturn;
    endif;
        
    //Assign a PID.
    
    childpt = READY_LIST + 32 * counter;
    
    [childpt] = counter;
    [childpt + 31] = (PTBR - 1024) / 8; //Assign parent PID.
    
    newptbr = PAGE_TABLE + counter * 8;
    counter = 0;
    n_procpages = 0;
        
    while (counter < 64) do
        if ([MEM_LIST + counter] == 0) then
           break; //Got a free page.
        endif;
        
        counter = counter + 1;
    endwhile;
    
    //Copy the stack page, to the counter'th page.
    alias srcword S7;
    alias destword S8;
    
    destword = counter * 512;
    srcword = [PTBR + 2 * counter] * 512;
    
    counter2 = 0;
    while (counter2 < 512) do
       [destword] = [srcword];
       destword = destword + 1;
       srcword = srcword + 1;
       counter2 = counter2 + 1;
    endwhile;
    
    [MEM_LIST + counter] = 1;
        
    //Copy the process pages.
    while (counter < 3) do
       
       //counter2 = page translation
       //counter3 = reference and valid bit.
       
       counter2 = newptbr + 2 * counter;
       counter3 = counter2 + 1;
       
       [counter2] = [PTBR + 2 * counter];
       [counter3] = [PTBR + 2 * counter + 1];
       
       if ([counter3] == "01" || [counter3] == "11") then
          [MEM_LIST + [counter2]] = [MEM_LIST + [counter2]] + 1;
       else
          if ([counter2] > 448) then
             [DISK_LIST + [counter2]] = [DISK_LIST + [counter2]] + 1;
             store(6, 19); //Commit those changes.
          endif;
       endif;
    endwhile;
        
    //New page table base register.
    [childpt + 5] = newptbr;
        
    //Set up the instruction pointer.
    [childpt + 4] = [physicalSP];
        
    //Set up the stack pointer.
    [childpt + 3] = SP - 1;
    [childpt + 2] = BP;
    [childpt + 6] = PTLR;
    
    [childpt + 7] = R0;
    [childpt + 8] = R1;
    [childpt + 9] = R2;
    [childpt + 10] = R3;
    [childpt + 11] = R4;
    [childpt + 12] = R5;
    [childpt + 13] = R6;
    [childpt + 14] = R7;
    
    alias counter4 S10;
    alias ppt S11;
    
    counter4 = 15;
    ppt = READY_LIST + (PTBR - PAGE_TABLE) * 4;
    
    while (counter4 < 31) do
        [childpt + counter4] = [ppt + counter4];
        [childpt + counter4 + 1] = [ppt + counter4 + 1];
        
        if ([childpt + counter4] != -1) then
            [FILE_TABLE + [childpt + counter4 + 1]] =
            [FILE_TABLE + [childpt + counter4 + 1]] + 1;
        endif;
        
        counter4 = counter4 + 2;
    endwhile;
    
    [childpt + 1] = 1;
    [physicalSP - 2] = [childpt];
    
    alias childPhysicalSP S12;
    
    childPhysicalSP =  [newptbr + 2 * ([childpt + 3] / 512)] * 512 + [childpt + 3] % 512;
    
    //Return value for the child.
    [childPhysicalSP - 1] = -2;
    ireturn;
endif;
