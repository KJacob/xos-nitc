alias physicalSP  S0;

physicalSP = [PTBR + (SP / 512) * 2] * 512 + SP % 512;
alias currentPID S1;
currentPID = (PTBR - 1024) / 8;

if ([physicalSP - 1] == 14 || [physicalSP - 1] == 10) then
   //Signal system call.
   alias i S2;
   alias readyaddr S3;
   
   i = 0;
   
   while (i < 32) do
      readyaddr = READY_LIST + 32 * i + 1;
      if ([readyaddr] == 100 + currentPID) then
         [readyaddr] = 1; //Bring back to life.
      endif;
      
      i = i + 1;
   endwhile;
endif;

if ([physicalSP - 1] == 14) then
   [physicalSP - 2] = 0;
   ireturn;
endif;

if ([physicalSP - 1] == 10) then
   //Exit system call.
   alias i S2;
   
   i = 0;
   
   while (i < 32) do
      if ([READY_LIST + i * 32 + 1] == 1) then
         break;
      endif;
      
      i = i + 1;
   endwhile;
   
   if (i == 32) then
      //Nothing more to do. halt.
      halt;
   endif;
   
   [READY_LIST + currentPID * 32 + 1] = 0; //Terminated.
   
   alias currPrFileTable S3;
   
   currPrFileTable = READY_LIST + 32 * currentPID + 15;
   
   i = 0;
   alias currSWOF S4;
  
   while (i < 8) do
      currSWOF = currPrFileTable + 2 * i;
      if ([currSWOF] != -1) then
         //Then it contains pointer to the system wide open file table.
         [FILE_TABLE + 2 * [currSWOF] + 1] = [FILE_TABLE + 2 * [currSWOF] + 1] - 1;
         
         if ([FILE_TABLE + 2 * [currSWOF] + 1] == 0) then
            [FILE_TABLE + 2 * [currSWOF]] = -1; //The entry is no more valid.
         endif;
      endif;
      
      [currSWOF] = -1; //Now close the file.
      i = i + 1;
   endwhile;
   
   i = 0;
   
   alias currTablePtr S5;
   alias currTableValidPtr S6;
   
   while (i < 4) do
      
      currTablePtr = PTBR + 2 * i;
      currTableValidPtr = currTablePtr + 1;
      
      if ([currTablePtr] != -1) then
         //Decrement these values.
   
         if ([currTableValidPtr] == "01" || [currTableValidPtr] == "11") then
            [MEM_LIST + [currTablePtr]] = [MEM_LIST + [currTablePtr]] - 1;
         else
            if ([currTablePtr] > 447) then
               [DISK_LIST + [currTablePtr]] = [DISK_LIST + [currTablePtr]] - 1;
            endif;
         endif;
      endif;
      
      i = i + 1;
   endwhile;
   
   //Commit changes to the disk.
   store(6, 20);
   
   //Hand over the control to timer interrupt routine.
   inline "JMP 4608";
endif;

if ([physicalSP - 1] == 13) then
   //Wait system call.
   alias processId S2;
   
   processId = [physicalSP - 3];
   
   if (processId == currentPID || [READY_LIST + 32 * processId + 1] == 0) then
      //This is not possible.
      [physicalSP - 2] = -1;
      ireturn;
   endif;
   
   //Change the state - wait, wait, wait!
   [READY_LIST + 32 * currentPID + 1] = 100 + processId;
   [physicalSP - 2] = 0; //Success
   
   //Hi, timer interrupt!
   inline "JMP 4608";
endif;
